import comp from "/Users/a0000/Documents/project/t-blog/src/.vuepress/.temp/pages/backend/algorithm/graph.html.vue"
const data = JSON.parse("{\"path\":\"/backend/algorithm/graph.html\",\"title\":\"图\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"图\",\"icon\":\"pen-to-square\",\"cover\":\"/assets/images/cover3.jpg\",\"date\":\"2024-06-12T00:00:00.000Z\",\"star\":true,\"sticky\":true,\"category\":[\"algorithm\"],\"tag\":[\"算法\",\"数据结构\",\"Java\"],\"description\":\"图 目录 表达方式 图的遍历 宽度优先遍历 深度优先遍历 最小生成树 K算法 代码实现 P算法 算法实现 表达方式 图难就难在其表达上，我们有时候很难去理解一个图的数据结构，不过不管是什么图，我们都可以理解为有向图，因为即便是无向图，其实说白就是一个双通的图而已 通用的图的表达方式有： 邻接表法 即将每个点的直接邻居用一个表记住，如果有权重也要将其记下...\",\"gitInclude\":[],\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/MoTangMo/t-blog/backend/algorithm/graph.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"T-Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"图\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"图 目录 表达方式 图的遍历 宽度优先遍历 深度优先遍历 最小生成树 K算法 代码实现 P算法 算法实现 表达方式 图难就难在其表达上，我们有时候很难去理解一个图的数据结构，不过不管是什么图，我们都可以理解为有向图，因为即便是无向图，其实说白就是一个双通的图而已 通用的图的表达方式有： 邻接表法 即将每个点的直接邻居用一个表记住，如果有权重也要将其记下...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://github.com/MoTangMo/t-blog/assets/images/cover3.jpg\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:src\",\"content\":\"https://github.com/MoTangMo/t-blog/assets/images/cover3.jpg\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"图\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Mr.T\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"算法\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"数据结构\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2024-06-12T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"图\\\",\\\"image\\\":[\\\"https://github.com/MoTangMo/t-blog/assets/images/cover3.jpg\\\"],\\\"datePublished\\\":\\\"2024-06-12T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Mr.T\\\",\\\"url\\\":\\\"www.tcoding.fun\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"目录\",\"slug\":\"目录\",\"link\":\"#目录\",\"children\":[]},{\"level\":2,\"title\":\"表达方式\",\"slug\":\"表达方式\",\"link\":\"#表达方式\",\"children\":[]},{\"level\":2,\"title\":\"图的遍历\",\"slug\":\"图的遍历\",\"link\":\"#图的遍历\",\"children\":[{\"level\":3,\"title\":\"宽度优先遍历\",\"slug\":\"宽度优先遍历\",\"link\":\"#宽度优先遍历\",\"children\":[]},{\"level\":3,\"title\":\"深度优先遍历\",\"slug\":\"深度优先遍历\",\"link\":\"#深度优先遍历\",\"children\":[]}]},{\"level\":2,\"title\":\"最小生成树\",\"slug\":\"最小生成树\",\"link\":\"#最小生成树\",\"children\":[{\"level\":3,\"title\":\"K算法\",\"slug\":\"k算法\",\"link\":\"#k算法\",\"children\":[]},{\"level\":3,\"title\":\"P算法\",\"slug\":\"p算法\",\"link\":\"#p算法\",\"children\":[]}]}],\"readingTime\":{\"minutes\":5.92,\"words\":1775},\"filePathRelative\":\"backend/algorithm/graph.md\",\"localizedDate\":\"2024年6月12日\",\"excerpt\":\"\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
